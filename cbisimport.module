<?php
// $Id$

define('CBIS_LANGUAGE_SV', 1);
define('CBIS_LANGUAGE_EN', 2);
define('CBIS_LANGUAGE_DE', 3);
define('CBIS_LANGUAGE_DA', 4);

/**
 * Implementation of hook_perm().
 */
function cbisimport_perm() {
  return array('administer cbis import');
}


/**
 * Returns the language code for a cbis language id.
 *
 * @param int $id
 * @return string
 */
function cbisimport_language_code($id) {
  $code = NULL;
  switch ($id) {
    case CBIS_LANGUAGE_SV:
      $code = 'sv';
      break;
    case CBIS_LANGUAGE_EN:
      $code = 'en';
      break;
    case CBIS_LANGUAGE_DE:
      $code = 'de';
      break;
    case CBIS_LANGUAGE_DA:
      $code = 'da';
      break;
  }
  return $code;
}

function cbisimport_available_languages() {
  return array(CBIS_LANGUAGE_SV, CBIS_LANGUAGE_EN,
    CBIS_LANGUAGE_DE, CBIS_LANGUAGE_DA);
}

function cbisimport_nodeapi(&$node, $op, $a3 = NULL, $page = NULL) {
  $p = db_fetch_object(db_query('SELECT pid, language FROM cbisimport_product_node WHERE nid = %d', array(':nid' => $node->nid)));
  switch ($op) {
    case 'delete':
      cbisimport_mapping_remove($p->pid, $p->language, $oid = 0, $subid = 0);
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function cbisimport_menu() {
  $menu = array();

  $menu['admin/settings/cbisimport'] = array(
    'title' => 'CBIS Import',
    'description' => 'Settings for the import from CBIS',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cbisimport_settings_form'),
    'file' => 'cbisimport.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer cbis import'),
  );

  $menu['admin/settings/cbisimport/category-tags/%'] = array(
    'title' => 'CBIS Import category tags',
    'description' => 'Settings for the import from CBIS',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cbisimport_category_tags_form', 4),
    'file' => 'cbisimport.admin.inc',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer cbis import'),
  );

  $menu['admin/settings/cbisimport/reimport'] = array(
    'title' => 'Reimport all products',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cbisimport_reimport_confirmation_form'),
    'file' => 'cbisimport.admin.inc',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer cbis import'),
  );

  $menu['cbisimport/trigger'] = array(
    'title' => 'CBIS Trigger Import',
    'page callback' => 'cbisimport_trigger_import_page',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access content'),
  );

  $menu['webhooks/cbisimport/product/%'] = array(
    'page callback' => '_cbisimport_product_updated_webhook',
    'page arguments' => array(3),
    'file' => 'cbisimport.webhook.inc',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $menu;
}

/**
 * Implementation hook_autoload_info().
 */
function cbisimport_autoload_info() {
  return array(
    'CbisClient'      => array('file' => 'CbisClient.php'),
    'CbisTemplate'    => array('file' => 'CbisTemplate.php'),
    'CbisTransaction' => array('file' => 'CbisTransaction.php'),
  );
}

/**
 * Implementation of hook_enable().
 */
function cbisimport_enable() {
  // Flush the autoload caches so that our classes are registered
  autoload_flush_caches();
}

/**
 * Returns an instance of the CbisClient.
 *
 * @param string $service
 *  The service that is to be accessed.
 * @return CbisClient
 */
function cbisimport_client($service, $options = array()) {
  return new CbisClient($service, array(
    'encoding'=>'UTF-8',
  ) + $options);
}

/**
 * Menu system callback for the trigger import page.
 */
function cbisimport_trigger_import_page() {
  if (user_access('administer cbis import') && !empty($_GET['refresh'])) {
    variable_set('cbisimport_last_update_check', 0);
    variable_set('cbisimport_last_updated', 0);
  }
  return nl2br(cbisimport_cron(TRUE));
}

/**
 * Implementation of hook_cron().
 */
function cbisimport_cron($debug = FALSE) {
  $output = $debug ? '' : NULL;

  $last_update = variable_get('cbisimport_last_update_check', 0);
  if ($last_update < strtotime('-1 day')) {
    if ($debug) {
      $output .= "Checking update status\n";
    }
    variable_set('cbisimport_last_update_check', time());

    $update_status = cbisimport_product_update_status();
    $updates = array();
    $since = $last_update = variable_get('cbisimport_last_updated', 0);
    foreach ($update_status as $id => $updated) {
      if ($updated > $since) {
        $last_update = max($updated, $last_update);
        $updates[$id] = $updated;
        cbisimport_queue_update($id, $updated);
      }
    }
    variable_set('cbisimport_last_updated', $last_update);
  }
  else {
    // Update transactions created last cron with accurate node-data
    // This can't be done during the previous cron due to
    // Drupal's cache funkyness.
    $res = db_query_range("SELECT * FROM {cbisimport_transactions} WHERE has_load_state = 0", 0, 50);
    while ($t = db_fetch_array($res)) {
      // Load old transaction and restore states
      try {
        $transaction = CbisTransaction::loadTransaction($t['id']);
        $nid = db_result(db_query("SELECT nid FROM {cbisimport_product_node} WHERE pid = %d AND language = %d", $t['pid'], $t['language']));

        // Load products id
        if ($nid) {
          $node = node_load($nid);
          if ($node) {
            // Add loaded node state and persist
            $transaction->addState('node.json', $node);
            $transaction->setHasLoadState(TRUE);
          } else {
            $transaction->addState('fail.json', array('error' => 'Failed to load node ' . $nid));
          }
        } else {
          $transaction->addState('fail.json', array('error' => 'No node with nid ' . $nid));
        }

        $transaction->persist();
        CbisTransaction::releaseCurrentTransaction();
      } catch (Exception $e) {
        // TODO: Useful logging
      }
    }

    // Load queue and import products
    $res = db_query_range("SELECT * FROM {cbisimport_queue} WHERE fail_count=0", 0, 10);
    $success = array();
    $fail = array();
    while ($qi = db_fetch_array($res)) {
      $languages = cbisimport_available_languages();

      $import = FALSE;
      $fine = TRUE;
      foreach ($languages as $language) {
        // Begin a new transaction
        $transaction = new CbisTransaction($qi['pid'], $qi['updated'], $language);
        CbisTransaction::setCurrentTransaction($transaction);

        // Load raw data and log transaction state
        $raw_data = cbisimport_get_product($qi['pid'], array(
          'languageId' => $language,
        ));
        $transaction->addState('raw_data.json', $raw_data);

        // Sanitize data and log new state
        $product = CbisTemplate::sanitize($raw_data);
        $transaction->addState('sanitized_data.json', $product);

        // Product found
        if ($product && !empty($product['Name'])) {
          if (!$import) {
            // The import can only be false on first language iteration.
            foreach (cbisimport_array($product['Categories']->Category) as $category) {
              // If any category is a match we'll go ahead with the import.
              $import = $import || cbisimport_should_import_category($category);
            }
          }
          // Break the language loop if the product shouldn't be imported.
          if (!$import) {
            // Log abort state and persist
            $transaction->addState('aborted.json', array(
              'error' => 'Product not imported due to category missmatch',
            ));
            $transaction->persist();
            break;
          }
          if ($debug) {
            $output .= "{$product['Id']} " . cbisimport_language_code($language) . ": {$product['Name']} \n";
          }
          cbisimport_product_recieved($product);
        }
        else {
          // Product not found, log state, persist, and continue
          $transaction->addState('aborted.json', array(
            'error' => 'Product not found or recieved from CBIS.'
          ));
          $fine = FALSE;
        }
      }
      if ($fine) {
        $success[] = $qi['pid'];
      }
      else {
        $fail[] = $qi['pid'];
      }
    }
    if (!empty($success)) {
      $plc = db_placeholders($success);
      if ($debug) {
        $output .= 'Success: ' . join(', ', $success) . "\n";
      }
      db_query("DELETE FROM {cbisimport_queue} WHERE pid IN ({$plc})", $success);
    }
    if (!empty($fail)) {
      $plc = db_placeholders($fail);
      if ($debug) {
        $output .= 'Fail: ' . join(', ', $fail) . "\n";
      }
      db_query("UPDATE {cbisimport_queue} SET fail_count = fail_count + 1 WHERE pid IN ({$plc})", $fail);
    }
  }

  return $output;
}

/**
 * Gets products from CBIS.
 *
 * @param array $options
 *  The query options to send to CBIS.
 * @return array
 *  The raw product data. Create a instance of CbisTemplate to
 */
function cbisimport_get_products($options=array(), $sanitize=TRUE) {
  $defaults = array(
    'languageId' => CBIS_LANGUAGE_SV,
    'categoryId' => 0,
    'templateId' => 0,
    'pageOffset' => 0,
    'itemsPerPage' => 10,
    'filter' => array(
      'OrderBy' => 'None',
      'SortOrder' => 'Descending',
      'SubCategoryId' => 0,
      'Highlights' => FALSE,
      'ProductType' => 'All',
      'WithOccasionsOnly' => FALSE,
      'ExcludeProductsWithoutOccasions' => FALSE,
    ),
  );

  $options = cbisimport_merge_recursive($defaults, $options);
  $client = cbisimport_client('Products');
  $res = $client->ListAll($options);
  $products = cbisimport_array($res->ListAllResult->Items->Product);
  foreach ($products as &$product) {
    $product->LanguageId = $options['languageId'];
  }
  if ($sanitize) {
    $insane = $products;
    $products = array();
    foreach ($insane as $product) {
      $products[] = CbisTemplate::sanitize($product);
    }
  }
  return $products;
}

/**
 * Fetches a list of categories from CBIS.
 *
 * @return array
 */
function cbisimport_get_geotree($language = 1, $reset = FALSE) {
  static $dir;
  $cache_key = 'cbisimport:geotree:' . $language;
  $geo = NULL;

  if (!isset($dir)) {
    $dir = array();
  }

  if (!$reset && isset($dir[$language])) {
    $geo = $dir[$language];
  }

  if (!$reset && !$geo && ($cache = cache_get($cache_key)) && isset($cache->data)) {
    $geo = $dir[$language] = $cache->data;
  }

  if (!$geo) {
    $client = cbisimport_client('Products');
    $geo = array();
    $result = $client->GetGeoTree(array(
      'language' => $language,
    ));
    if ($result) {
      foreach (cbisimport_array($result->GetGeoTreeResult->Nodes->TreeNodeOfGeoNode) as $root) {
        $root->Data->Parent = 0;
        _cbisimport_add_geonode($geo, $root);
      }
    }
    cache_set($cache_key, $geo);
    $dir[$language] = $geo;
  }

  return $geo;
}

/**
 * Flattens the geo tree from CBIS.
 *
 * @param array $geonodes
 * @param array $geonode
 * @return void
 */
function _cbisimport_add_geonode(&$geonodes, $geonode) {
  $geonodes[$geonode->Data->Id] = $geonode->Data;
  $geonode->Data->Children = array();
  foreach(cbisimport_array($geonode->Children->TreeNodeOfGeoNode) as $child) {
    if ($child) {
      $geonodes[$geonode->Data->Id]->Children[] = $child->Data->Id;
      $geonodes[$child->Data->Id] = $child->Data;
      $child->Data->Parent = $geonode->Data->Id;
      _cbisimport_add_geonode($geonodes, $child);
    }
  }
}

/**
 * Gets a product from CBIS by id.
 *
 * @param array $options
 *  The query options to send to CBIS.
 * @return array
 *  The raw product data. Create a instance of CbisTemplate to
 */
function cbisimport_get_product($id, $options=array()) {
  $defaults = array(
    'languageId' => CBIS_LANGUAGE_SV,
    'categoryId' => 0,
    'templateId' => 0,
    'productId' => $id,
  );

  $options = cbisimport_merge_recursive($defaults, $options);
  $cache_policy = variable_get('cbisimport_product_cache', 'off');
  $path = file_directory_path() . '/cbis_import_cache';

  $product = NULL;
  if ($cache_policy !== 'off') {
    $option_string = http_build_query($options, NULL, '&');
    $hash = md5($option_string);
    $key = $id . '-' . $hash;
    if (is_file($path . '/' . $key)) {
      $data = file_get_contents($path . '/' . $key);
      $product = unserialize($data);
    }
  }

  if (!$product) {
    $client = cbisimport_client('Products');
    $res = $client->GetById($options);
    $product = $res->GetByIdResult;
    $product->LanguageId = $options['languageId'];

    if ($cache_policy == 'on') {
      if (file_check_directory($path, TRUE)) {
        $data = serialize($product);
        file_put_contents($path . '/' . $key, $data);
      }
    }
  }

  return $product;
}

/**
 * Gets the update status for all the products.
 *
 * @return array
 *  An associative array with the timestamps for when the products were
 *  updated keyed by the product id's.
 */
function cbisimport_product_update_status() {
  $client = cbisimport_client('Products');
  $res = $client->GetUpdateInformation();

  $updates = array();
  foreach(cbisimport_array($res->GetUpdateInformationResult->ProductUpdate) as $up) {
    $updates[$up->ProductId] = strtotime($up->LastUpdated, time());
  }
  return $updates;
}

/**
 * Queues a update for a product.
 *
 * @param int $id
 * @param int $updated
 * @return void
 */
function cbisimport_queue_update($id, $updated) {
  $queued_updated = db_result(db_query('SELECT updated FROM {cbisimport_queue} WHERE pid = %d', array(
    ':pid' => $id,
  )));
  $update = NULL;
  if ($queued_updated) {
    $update = array('pid');
  }
  $record = array(
    'pid' => $id,
    'updated' => $updated,
    'fail_count' => 0,
  );
  // Only queue a update if we don't already have it queued or if the updated
  // timestamp is later than what's already in the queue.
  if (!$update || $queued_updated < $updated) {
    drupal_write_record('cbisimport_queue', $record, $update);
  }
}

/**
 * Normalizes results into arrays. This is necessary because the deserialized
 * xml from the soap client is inconsistent when it comes to collections of
 * elements that contain 1 versus 2 or more elements.
 *
 *    <a><b></b><a> => a->b == object
 *    <a><b></b><b></b><a> => a->b == array(object, object)
 *
 * @param mixed $v
 * @return array
 */
function cbisimport_array($v) {
  if (!is_array($v)) {
    $a=(array)$v;
    if (is_object($v) && empty($a)) {
      $v = array();
    }
    else {
      $v = array($v);
    }
  }
  return $v;
}

/**
 * An alternative to array_merge_recursive
 *
 * @return array
 */
function cbisimport_merge_recursive() {
  $args = func_get_args();
  $a = array_shift($args);

  foreach ($args as $b) {
    foreach ($b as $key => $val) {
      if (is_array($val) && is_array($a[$key])) {
        $b[$key] = custom_merge_recursive($a[$key], $val);
      }
    }
    $a = array_merge($a, $b);
  }

  return $a;
}

/**
 * Creates an array of tags from a category.
 *
 * @param int $cid
 * @return array
 */
function cbisimport_category_tags($cid, $language) {
  static $langs = array();

  if (empty($langs[$language])) {
    $category_tags = db_result(db_query("SELECT tags FROM {cbisimport_category_tags} WHERE language = %d", array(
      ':language' => $language,
    )));
    $category_tags = unserialize($category_tags);
    if (!$category_tags) {
      $category_tags = array();
    }
    $langs[$language] = $category_tags;
  }
  else {
    $category_tags = $langs[$language];
  }

  $tags = array();
  if (!empty($category_tags[$cid])) {
    $tags = explode(', ', $category_tags[$cid]);
  }
  return $tags;
}

/**
 * Fetches a list of categories from CBIS.
 *
 * @return array
 */
function cbisimport_get_categories($language = 1, $refresh = FALSE) {
  static $dir;
  $cache_key = 'cbisimport:categories:' . $language;
  $catergories = NULL;

  if (!isset($dir)) {
    $dir = array();
  }

  if (!$refresh && !$categories && ($cache = cache_get($cache_key)) && isset($cache->data)) {
    $categories = $dir[$language] = $cache->data;
  }

  if (!$refresh && !$categories && isset($dir[$language])) {
    $categories = $dir[$language];
  }

  if (!$categories) {
    $client = cbisimport_client('Categories');
    $categories = array();
    $result = $client->ListAll(array(
      'languageId' => $language,
      'parentCategoryId' => 0,
    ));
    if ($result) {
      foreach (cbisimport_array($result->ListAllResult->Nodes->TreeNodeOfCategory) as $root) {
        $root->Data->Parent = 0;
        _cbisimport_add_category($categories, $root);
      }
    }
    cache_set($cache_key, $categories);
    $dir[$language] = $categories;
  }

  return $categories;
}

/**
 * Flattens the category tree from CBIS.
 *
 * @param array $categories
 * @param array $category
 * @return void
 */
function _cbisimport_add_category(&$categories, $category) {
  $categories[$category->Data->Id] = $category->Data;
  $category->Data->Children = array();
  foreach(cbisimport_array($category->Children->TreeNodeOfCategory) as $child) {
    if ($child) {
      $categories[$category->Data->Id]->Children[] = $child->Data->Id;
      $categories[$child->Data->Id] = $child->Data;
      $child->Data->Parent = $category->Data->Id;
      _cbisimport_add_category($categories, $child);
    }
  }
}

function cbisimport_category_is_instance_of($category, $id) {
  $instance = $category->Id == $id;

  if (!$instance) {
    $categories = cbisimport_get_categories();
    $category = isset($categories[$category->Id]) ? $categories[$category->Id] : NULL;
    while (!$instance && $category) {
      $instance = $category->Parent == $id;
      $category = isset($categories[$category->Parent]) ? $categories[$category->Parent] : NULL;
    }
  }
  return $instance;
}

function cbisimport_should_import_category($category) {
  $categories = variable_get('cbisimport_categories', array());
  $import = FALSE;

  if (empty($categories)) {
    $import = TRUE;
  }
  else {
    foreach ($categories as $cat) {
      if ($cat && cbisimport_category_is_instance_of($category, $cat)) {
        $import = TRUE;
        break;
      }
    }
  }
  return $import;
}

/**
 * Fetches a list of templates from CBIS.
 *
 * @return array
 */
function cbisimport_get_templates() {
  static $templates;
  $cache_key = 'cbisimport:templates';

  if (!$templates && ($cache = cache_get($cache_key)) && isset($cache->data)) {
    $templates = $cache->data;
  }

  if (!$templates) {
    $templates = array();
    $client = cbisimport_client('Templates');
    $result = $client->ListAll(array(
      'languageId' => 1,
    ));
    foreach ($result->ListAllResult->Template as $template) {
      $templates[$template->Id] = $template;
    }
    cache_set($cache_key, $templates);
  }

  return $templates;
}

/**
 * Returns a specific template.
 *
 * @param int $id
 *  The Id of the template
 * @return object
 */
function cbisimport_get_template($id) {
  $templates = cbisimport_get_templates();

  $template = NULL;
  if (isset($templates[$id])) {
    $template = $templates[$id];
  }
  return $template;
}

/**
 * Function that should be run when we've fetched products from CBIS. This
 * will trigger hooks that inform other modules of updates and creations.
 *
 * @param array $product
 * @return void
 */
function cbisimport_product_recieved($product) {
  $info = (object)array(
    'mappings' => array(),
  );
  $info->product = $product;

  // Squeeze some sensible information out of the occasions
  foreach ($product['Occasions'] as $o) {
    $o->Expanded = cbisimport_expand_occasion($o);
  }

  $info->current = db_fetch_array(db_query("SELECT * FROM {cbisimport_product} WHERE pid=%d AND language=%d", array(
    ':pid' => $product['Id'],
    ':language' => $product['LanguageId'],
  )));
  if ($info->current) {
    $info->current['data'] = unserialize($info->current['data']);

    // Get node mappings for the product
    $res = db_query("SELECT `oid`, subid, nid FROM {cbisimport_product_node} WHERE pid=%d AND language=%d", array(
      ':pid' => $product['Id'],
      ':language' => $product['LanguageId'],
    ));
    while ($mapping = db_fetch_array($res)) {
      $info->mappings[$mapping['oid']][$mapping['subid']] = $mapping['nid'];
    }
    $info->current['occasions'] = cbisimport_product_occasions($product['Id']);
  }

  // add fields that only exist in swedish to other languages
  if($info->product['LanguageId'] != 1) {
    $fields = array(
      'website',
    );
    _cbisimport_check_and_add_parent_field($info->product, $fields);
  }

  module_invoke_all('cbisimport_saving_product', $info);
  cbisimport_product_write($product, $info->current);
}

function cbisimport_product_occasions($id) {
  static $so;
  $occasions = array();
  if (!isset($so[$id])) {
    $res = db_query("SELECT * FROM {cbisimport_product_occasion} WHERE pid=%d", array(
      ':pid' => $id,
    ));
    while ($o = db_fetch_array($res)) {
      $occasions[$o['oid']] = $o;
    }
    $so = array($id => $occasions);
  }
  else {
    $occasions = $so[$id];
  }
  return $occasions;
}

/**
 * Writes a product to the database.
 *
 * @param array $product
 * @param bool $update
 * @return void
 */
function cbisimport_product_write($product, $update=FALSE) {
  $entry = array(
    'pid' => $product['Id'],
    'language' => $product['LanguageId'],
    'name' => $product['Name'],
    'template' => $product['TemplateId'],
    'updated' => $product['PublishedDate'], // TODO: Exchange as soon as the API exposes mod-time.
    'data' => serialize($product),
  );
  drupal_write_record('cbisimport_product', $entry, $update ? array('pid', 'language') : array());

  // All template id's with occasions (I think)
  $template_ids = array(76, 81, 91, 105);
  // Letting the swedish language version take responsibility for occasions.
  if ($product['LanguageId'] == CBIS_LANGUAGE_SV && in_array($product['TemplateId'], $template_ids)) {
    $occasions = cbisimport_product_occasions($product['Id']);
    $delete = array();
    $update = array();
    $add = array();
    foreach (array_keys($occasions) as $id) {
      if (!isset($product['Occasions'][$id])) {
        $delete[] = $id;
        module_invoke_all('cbisimport_deleting_occasion', $occasions[$id], $product);
      }
      else {
        $update[] = $id;
      }
    }
    foreach (array_keys($product['Occasions']) as $id) {
      if (!isset($occasions[$id])) {
        $add[] = $id;
      }
    }

    // Delete old occasions
    if (!empty($delete)) {
      db_query(sprintf('DELETE FROM {cbisimport_product_occasion} WHERE `oid` IN(%s)',
        db_placeholders($delete)), $delete);
    }

    // Add new occasions
    foreach ($add as $id) {
      $record = _cbisimport_occasion_record($product['Occasions'][$id]);
      if ($record['oid'] && $record['pid'] && $record['start_date'] && $record['end_date']) {
        module_invoke_all('cbisimport_adding_occasion', $record, $product);
        drupal_write_record('cbisimport_product_occasion', $record);
      }
    }

    // Update existing occasions
    foreach ($update as $id) {
      $record = _cbisimport_occasion_record($product['Occasions'][$id]);
      module_invoke_all('cbisimport_updating_occasion', $record, $product);
      drupal_write_record('cbisimport_product_occasion', $record, array('oid'));
    }
  }

  // Add saved product to transaction and persist it (this is called from
  // the end of our import while-loop)
  CbisTransaction::getCurrentTransaction()
    ->addState('saved_product.json', $product)
    ->persist();
}

function _cbisimport_check_and_add_parent_field(&$product, $fields) {
  $data = db_fetch_object(db_query('SELECT data FROM {cbisimport_product} WHERE language = 1 AND pid = '.$product['Id']));
  $parent = unserialize($data->data);
  foreach($fields as $field) {
    $product['Attributes'][$field] = $parent['Attributes'][$field];
  }
}

function _cbisimport_occasion_record($occasion) {
  return array(
    'oid' => $occasion->Id,
    'pid' => $occasion->ProductId,
    'start_date' => $occasion->StartDate,
    'end_date' => $occasion->EndDate,
    'start_time' => $occasion->StartTime,
    'end_time' => $occasion->EndTime,
    'days' => $occasion->ValidDays,
  );
}

/**
 * Expands a occasion record into an array of start->end timestamp tuples.
 *
 * @param array $occasion
 * @return array
 */
function cbisimport_expand_occasion($occasion) {
  $occasions = array();
  $daymap = array(
    'sunday' => 0,
    'monday' => 1,
    'tuesday' => 2,
    'wednesday' => 3,
    'thursday' => 4,
    'friday' => 5,
    'saturday' => 6,
  );

  $r = $occasion;
  if (is_object($r)) {
    $r = _cbisimport_occasion_record($r);
  }

  $days = array();
  foreach (split(' ', $r['days']) as $day) {
    $days[$daymap[strtolower($day)]] = TRUE;
  }

  $today = strtotime(date('Y-m-d\T00:00P')) + date('Z');
  $day = $r['start_date'];
  while ($day <= $r['end_date'] && count($occasions) < 100) {
    if ($day >= $today) {
      $wd = date('w', $day);
      if (isset($days[$wd])) {
        $occasions[] = array(
          $day + $r['start_time'],
          $day + $r['end_time'],
        );
      }
    }
    $day += 60 * 60 * 24;
  }
  return $occasions;
}

/**
 * undocumented function
 *
 * @param int|object $info
 *  Either a product info object or a product id.
 * @param int $oid
 *  Optional. Occasion id. Defaults to 0.
 * @param int $subid
 *  Optional. Sub-identifier. Defaults to 0.
 * @return int
 * @author Hugo Wetterberg
 */
function cbisimport_mapping_exists($info, $oid = 0, $subid = 0) {
  $nid = $info->mappings[$oid][$subid] ? $info->mappings[$oid][$subid] : FALSE;
  if($nid) {
    $res = db_result(db_query('SELECT * FROM {node} WHERE nid = %d', array(':nid' => $nid)));
    if($res == FALSE) {
      cbisimport_mapping_remove($info->product['Id'], $info->product['LanguageId'], $oid, $subid);
    } else {
      $value = $nid;
    }
  } else {
    $value = 0;
  }
  return $value;
}

/**
 * Remove a product node assiociation.
 *
 * @param int $pid
 *  Product id.
 * @param int $language
 *  Product language.
 * @param int $nid
 *  Node id.
 * @param int $oid
 *  Optional. Occasion id. Defaults to 0.
 * @param int $subid
 *  Optional. Sub-identifier. Defaults to 0.
 * @return void
 */
function cbisimport_mapping_add($pid, $language, $nid, $oid = 0, $subid = 0) {
  $values = array(
    'pid' => $pid,
    'language' => $language,
    'oid' => $oid,
    'subid' => $subid,
    'nid' => $nid,
  );
  drupal_write_record('cbisimport_product_node', $values);
}

/**
 * Remove a product node assiociation.
 *
 * @param int $pid
 *  Product id.
 * @param int $oid
 *  Optional. Occasion id. Defaults to 0.
 * @param int $subid
 *  Optional. Sub-identifier. Defaults to 0.
 * @return void
 */
function cbisimport_mapping_remove($pid, $language, $oid = 0, $subid = 0) {
  db_query("DELETE FROM {cbisimport_product_node}
    WHERE pid = %d AND language=%d AND `oid`= %d AND subid = %d", array(
      ':pid' => $pid,
      ':language' => $language,
      ':oid' => $oid,
      ':subid' => $subid,
    ));
}