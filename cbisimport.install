<?php
// $Id$

function cbisimport_install() {
  drupal_install_schema('cbisimport');
}

function cbisimport_uninstall() {
  drupal_uninstall_schema('cbisimport');
}

function cbisimport_schema() {
  $schema = array();

  $schema['cbisimport_queue'] = array(
    'description' => 'Update queue from CBIS',
    'fields' => array(
      'pid' => array(
        'description' => t('The primary identifier for a product.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'updated' => array(
        'description' => t('The timestamp for when the product was updated.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
			'archive' => array(
				'description' => t('If this is a archive/unpublish update or not.'),
        'type' => 'int',
				'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
			),
      'fail_count' => array(
        'description' => t('The number of times that fetching has failed.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('pid'),
    'indexes' => array(
      'product' => array('fail_count', 'updated'),
    ),
  );

  $schema['cbisimport_transactions'] = array(
    'description' => 'CBIS import transactions',
    'fields' => array(
      'id' => array(
        'description' => t('The primary identifier for a transaction.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => t('The primary identifier for a product.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'language' => array(
        'description' => t('The number of times that fetching has failed.'),
        'type' => 'varchar',
        'length' => 2,
        'not null' => TRUE,
        'default' => 'sv',
      ),
      'timestamp' => array(
        'description' => t('Timestamp for the product modification date.'),
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'has_load_state' => array(
        'description' => t('Wether or not this transaction has a node_load state.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'has_load_state' => array('pid', 'has_load_state'),
    ),
  );

  $schema['cbisimport_product'] = array(
    'description' => 'Stores products from CBIS',
    'fields' => array(
      'pid' => array(
        'description' => t('The primary identifier for a product.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
			'archived' => array(
				'description' => t('If the product is archived or not.'),
		    'type' => 'int',
				'default' => 0,
		    'unsigned' => TRUE,
		    'not null' => TRUE,
			),
      'language' => array(
        'description' => t('The product language.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => t('The product name'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'template' => array(
        'description' => t('The template id for a product.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'updated' => array(
        'description' => t('The timestamp for when the product was updated.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => t('The data from CBIS'),
        'type' => 'text',
        'size' => 'medium',
        'serialized' => TRUE,
      ),
    ),
    'indexes' => array(
      'product' => array('pid'),
    ),
    'primary key' => array('pid', 'language'),
  );

  $schema['cbisimport_product_occasion'] = array(
    'description' => 'Stores product occasions from CBIS',
    'fields' => array(
      'oid' => array(
        'description' => t('The primary identifier for the occasion.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => t('The primary identifier for the product.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'language' => array(
        'description' => t('The product language.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'start_date' => array(
        'description' => t('The start date for the occasion.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'end_date' => array(
        'description' => t('The start date for the occasion.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'start_time' => array(
        'description' => t('The start time for the occasion (second of day).'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'end_time' => array(
        'description' => t('The end time for the occasion (second of day).'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'days' => array(
        'description' => t('The valid weekdays'),
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('oid'),
    'indexes' => array(
      'product' => array('pid'),
    ),
  );

  $schema['cbisimport_category_tags'] = array(
    'description' => 'Tag translations for cbis categories',
    'fields' => array(
      'language' => array(
        'description' => t('The language for the tags.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'tags' => array(
        'description' => t('Serialized tag data'),
        'type' => 'text',
        'size' => 'medium',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('language'),
  );

  $schema['cbisimport_product_node'] = array(
    'description' => 'Stores product occasions from CBIS',
    'fields' => array(
      'pid' => array(
        'description' => t('The primary identifier for the product.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'language' => array(
        'description' => t('The product language.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'oid' => array(
        'description' => t('The primary identifier for the occasion.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'subid' => array(
        'description' => t('The sub-identifier for the node association.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => t('The primary identifier for the node associated with the product.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('pid', 'language', 'oid', 'subid'),
    'indexes' => array(
      'node' => array('nid'),
      'product' => array('pid'),
      'occasion' => array('pid', 'oid'),
    ),
  );

  return $schema;
}

function cbisimport_update_6001() {
  $ret = array();

  db_create_table($ret, 'cbisimport_category_tags', array(
    'description' => 'Tag translations for cbis categories',
    'fields' => array(
      'language' => array(
        'description' => t('The language for the tags.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'tags' => array(
        'description' => t('Serialized tag data'),
        'type' => 'text',
        'size' => 'medium',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('language'),
  ));

  return $ret;
}

function cbisimport_update_6002() {
  $ret = array();

  db_create_table($ret, 'cbisimport_transactions', array(
    'description' => 'CBIS import transactions',
    'fields' => array(
      'id' => array(
        'description' => t('The primary identifier for a transaction.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => t('The primary identifier for a product.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'language' => array(
        'description' => t('The number of times that fetching has failed.'),
        'type' => 'varchar',
        'length' => 2,
        'not null' => TRUE,
        'default' => 'sv',
      ),
      'timestamp' => array(
        'description' => t('Timestamp for the product modification date.'),
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'has_load_state' => array(
        'description' => t('Wether or not this transaction has a node_load state.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'has_load_state' => array('pid', 'has_load_state'),
    ),
  ));

  return $ret;
}

function cbisimport_update_6003() {
	$ret = array();

	db_add_field($ret, 'cbisimport_queue', 'archive', array(
		'description' => t('If this is a archive/unpublish update or not.'),
    'type' => 'int',
		'default' => 0,
    'unsigned' => TRUE,
    'not null' => TRUE,
	));

	db_add_field($ret, 'cbisimport_product', 'archived', array(
		'description' => t('If the product is archived or not.'),
    'type' => 'int',
		'default' => 0,
    'unsigned' => TRUE,
    'not null' => TRUE,
	));

	return $ret;
}